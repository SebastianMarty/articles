Containers
Foundations of Docker
20 Oct 2017
Tags: containers, c#, dotnet, nginx, docker, lxc, virtualization

Michael Ingold
Software Engineer, Leuchter AG
michael.ingold@leuchterag.ch
http://michaelingold.ch/
@michaelingold


* Agenda

- Virtualization
- Demo
- Docker
- Exercises
- Compose
- Exercises

* 
.image res/quote.png _ 800

* Virtualization [0]

Resources we manage:

- *Memory:* Generally RAM but also includes Caches at different layers
- *Compute:* Generally includes how much time a workload can get from the CPU
- *Network:* Usually bandwith is sharded between workloads but this can also include SDNs, Firewall rules etc.
- *Storage:* Generally a max quota of storage that can be used by a workload but can also mean enforcing IOPS limits.
- *Various:* host system resources like memory mapped files, message queues, sockets etc. 


* Types of virtualization

Generally we distinguish two types of virtualization:

- Hardware Virtualization
Complete abstraction of the hardware through a hypervisor.

- OS Virtualization (Operating System)
Host and guest share specific system (usually the kernel) resources.


* Hardware Virtualization

.image res/hardware-virt.png _ 900

* Hardware Virtualization [1]

- Hypervisor based virtualization
- Hypervisor manages resources
- Usually your processor will support this kind of virtualization at it's silicon level
- Usually guests must be of the same computing architecture as your processors instruction set.
- Expensive - all interation muss pass through additional layers of abstraction with translation.
- Xen, VmWare, VirtualBox, Hyper-V, ...

* OS Virtualization

.image res/os-virt.png _ 900

* OS Virtualization [1]

- The kernel manages & isolates resources between guests
- Host & Guests share the same kernel
- Requires the same computing architecture for host and guests
- Sharing the kernel is a security risk!
- Bare-Metal performance, no Hypervisor and no instruction translation required
- LXC, OpenVz, Solaris Zones, etc.


* Demo: OS-Virtualization with lxc

* OS Virtualization with Docker

.image res/docker-virt.png _ 900

* 
.image res/quote2.png _ 900

* Docker [0]

Docker is a collection of tools for virtualization:

- Container format (Dockerfile)
- runc (a.k.a. `containerd` - container runtime)
- libnetwork
- libentitlement

* Docker [1]

.image res/docker-virt.png _ 900

* Docker [1]

Run a simple container with Docker:

 docker run -it -p 8080:80 nginx
 docker run  -p 8080:80 nginx

* Docker - Image format [3]

*FROM*: Provide a base image.
*COPY*: Copy file form a local directory into the container
*ENV*: Set an environment variable
*RUN*: Runs a command.
*EXPOSE*: Expose a port that will be bound by this container.
*CMD*: Run a command and terminate the container when it returns.

Go to [[https://docs.docker.com/engine/reference/builder/][docs.docker.io]] for a full reference on the Dockerfile syntax. 

* Docker - Build your Image [4]

Dockerfiles need to build it:

 docker build -t my-fancy-page ./res/ex2

and run it:

 docker run -it -p 8080:80 my-fancy-page:latest

to reach the service the `-p` parameter is necessary. It forwards a local port into the container.

* Demo: Bootstrap a webserver with nginx

* Ex 2: A webserver with nginx

* Docker-Compose

* Compose

- orchestrate multiple containers to form an application
- map ports
- mount volumes (also from the host) for multiple containers
- collect logs per containers
- manage state across multiple restarts of the composition.
- simple file syntax that describes the composition

* Compose [1]

*docker-compose.yml:*

  version: '3'
  services:
    zookeeper:
      image: wurstmeister/zookeeper
      ports:
        - "2181:2181"
    kafka:
      image: wurstmeister/kafka:latest
      ports:
        - "9092:9092"
      environment:
        KAFKA_ADVERTISED_HOST_NAME: localhost
        KAFKA_CREATE_TOPICS: "system.events:1:1"
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    mongo:
      image: mongo:latest
      ports:
        - "27017:27017"

* Compose [2]

The `docker-compose` tool looks in the current working directory for a `docker-compose.yml` file and uses this if not `-f`  parameter has been given.

Start a composition:

 docker-compose up

Stop a composition:

 docker-compose down

Remove all persisted state:

 docker-compose rm

* Ex.3 A complete web hosting

* Applications

- Local development setups (start things like databases, messaging systems, etc.) that do not clutter the dev machine
- Test different versions of components against each other.
- Local test environments
- Run tools like build agents etc.
- Reproducible testing environments
- ...

* Outlook

There are things docker itself cannot solve or insufficiently addresses:

- scale and monitor application
- manage Resources like storage
- networking outside localhost
- hard hypervisor based isolation.

This where orchestration tools like *Kubernetes* bridge the gap!